class Solution {
public:
     int kadane(vector<int> &nums ,int size)
     {
         int curr_sum = 0;
         int maxi = INT_MIN;
         for(int i = 0; i < size; i++)
         {
             curr_sum = curr_sum + nums[i];
             if(curr_sum < 0)
             {
                 curr_sum = 0;
             }
             maxi = max(maxi, curr_sum);
         }
         
         return maxi;
     }
    int maxSubarraySumCircular(vector<int>& nums) {
        int size = nums.size();
        int wrap;    // This is for wrapping array
        int non_wrap;   //This is for non wrapping array
        int maxi = INT_MIN;
        int count = 0;
        for(int i = 0; i < size; i++)
         {
             if(nums[i] < 0)
             {
                 count++;
             }
         }
         if(size == count)
         {
            for(int i = 0; i < size; i++)
            {
                maxi = max(maxi, nums[i]);
            }
            return maxi;
         }

         non_wrap = kadane(nums,size);
        int sum = 0;
        for(int i = 0; i < size; i++)
        {
            sum = sum + nums[i];
            nums[i] = -nums[i];
        }

        wrap = sum + kadane(nums, size);
        int ans = max(wrap,non_wrap);
        return ans;

        
    }
};
